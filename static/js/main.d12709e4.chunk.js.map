{"version":3,"sources":["InfoBox.js","sortingData.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","active","isRed","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","size","recovered","deaths","console","log","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","pathOptions","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","MapContainer","scrollWheelZoom","TileLayer","attribution","url","Table","Chart","register","CategoryScale","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetchData","fetch","then","response","json","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","getCountreisData","name","iso2","sortedData","onCounteryChange","event","countryCode","target","left","FormControl","variant","sx","m","minWidth","Select","labelId","id","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d12709e4.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport \"./InfoBox.css\";\r\n\r\nfunction InfoBox({ title, cases, active,isRed, total, ...props }) {\r\n  return (\r\n    <Card onClick={props.onClick} className={`infoBox ${active && 'infoBox--selected'} ${isRed && 'infoBox--red'}`}>\r\n      <CardContent className=\"infoBox\">\r\n        <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n          {title}\r\n        </Typography>\r\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\r\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    color: \"#CC1034\",\r\n    size : 10000\r\n  },\r\n  recovered: {\r\n    color: \"#7dd71d\",\r\n    size : 10000\r\n  },\r\n  deaths: {\r\n    color: \"#fb4443\",\r\n    size :200000\r\n  },\r\n};\r\nconsole.log(casesTypeColors[\"recovered\"].color);\r\n\r\nexport const sortData = (data) => {\r\n  let sortedData = [...data];\r\n\r\n  return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType) =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      pathOptions={{color: casesTypeColors[casesType].color,\r\n        fillColor: casesTypeColors[casesType].color }}\r\n      fillOpacity={0.4}\r\n      radius={Math.sqrt(country[casesType] * casesTypeColors[casesType].size)}\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n","import React from \"react\";\r\nimport \"./Map.css\";\r\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\r\nimport { showDataOnMap } from \"./sortingData\";\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n  return (\r\n    <div className=\"map\">\r\n      <MapContainer center={center} zoom={zoom} scrollWheelZoom={true} >\r\n        <TileLayer\r\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        />\r\n        {countries && casesType && showDataOnMap(countries,casesType)}\r\n        \r\n      </MapContainer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport \"./Table.css\";\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map((country) => (\r\n        <tr>\r\n          <td>{country.country}</td>\r\n          <td>\r\n            <strong>{numeral(country.cases).format(\"0,0\")}</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\nimport Chart from 'chart.js/auto'\r\nimport {CategoryScale} from 'chart.js'; Chart.register(CategoryScale)\r\n\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data,casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=250\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n          console.log(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div>\r\n      {data && data.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                label: 'Covid Line Chart',\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  InputLabel,\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStat } from \"./sortingData\";\nimport LineGraph from \"./LineGraph.js\";\nimport numeral from \"numeral\";\nimport \"leaflet/dist/leaflet.css\";\nimport Fade from 'react-reveal/Fade';\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"Worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({\n    lat: 36.310699,\n    lng: 59.599457,\n  });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState();\n  const [casesType, setCasesType] = useState(\"cases\");\n  console.log(mapCenter);\n  console.log(casesType);\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountreisData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          console.log(data);\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n        });\n    };\n    getCountreisData();\n  }, []);\n\n  const onCounteryChange = async (event) => {\n    const countryCode = event.target.value;\n    const url =\n      countryCode === \"Worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(data);\n        setCountry(countryCode);\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(13);\n      });\n  };\n  console.log(countryInfo);\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n        <Fade left>\n            <h1>COVID-19 TRACKER</h1>\n            </Fade>\n          <FormControl variant=\"standard\" sx={{ m: 1, minWidth: 120}}>\n            <Select\n              labelId=\"demo-simple-select-standard-label\"\n              id=\"demo-simple-select-standard\"\n              value={country}\n              onChange={onCounteryChange}\n              \n            >\n              <MenuItem value=\"Worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox\n            isRed\n            active={casesType === \"cases\"}\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus cases\"\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={countryInfo.cases}\n          />\n          <InfoBox\n            active={casesType === \"recovered\"}\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={countryInfo.recovered}\n          />\n          <InfoBox\n            isRed\n            active={casesType === \"deaths\"}\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={countryInfo.deaths}\n          />\n        </div>\n        <Map\n          casesType={casesType}\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData} />\n          <h3>Worldwide new {casesType}</h3>\n          <LineGraph casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}